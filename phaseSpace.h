#ifndef PHASESPACE_UTLRA_KEK
#define PHASESPACE_UTLRA_KEK

#include <complex>
#include "amplitude_functions.h" // Barrier factors and breakup momentum are defined in 'breitWigners.h'
#include "tabulated_integrals.h" // Tabulated phase-space integrals

double phaseSpace(double m3Pi, int mode=0, int L=0, double m_isobar=1.){
	if (mode == 0){ // Flat phase space.
		return 1.;
	};
	if (mode == 1){ // FLAT 3 Particle phase space interpolation between 10 MeV steps from 0.500 to 2.500 GeV. Zero otherwise
		double  ms[] = {0.5, 0.51, 0.52, 0.53, 0.54, 0.55, 0.56, 0.57, 0.58, 0.59, 0.6, 0.61, 0.62, 0.63, 0.64, 0.65, 0.66, 0.67, 0.68, 0.69, 0.7, 0.71, 0.72, 0.73, 0.74, 0.75, 0.76, 0.77, 0.78, 0.79, 0.8, 0.81, 0.82, 0.83, 0.84, 0.85, 0.86, 0.87, 0.88, 0.89, 0.9, 0.91, 0.92, 0.93, 0.94, 0.95, 0.96, 0.97, 0.98, 0.99, 1.0, 1.01, 1.02, 1.03, 1.04, 1.05, 1.06, 1.07, 1.08, 1.09, 1.1, 1.11, 1.12, 1.13, 1.14, 1.15, 1.16, 1.17, 1.18, 1.19, 1.2, 1.21, 1.22, 1.23, 1.24, 1.25, 1.26, 1.27, 1.28, 1.29, 1.3, 1.31, 1.32, 1.33, 1.34, 1.35, 1.36, 1.37, 1.38, 1.39, 1.4, 1.41, 1.42, 1.43, 1.44, 1.45, 1.46, 1.47, 1.48, 1.49, 1.5, 1.51, 1.52, 1.53, 1.54, 1.55, 1.56, 1.57, 1.58, 1.59, 1.6, 1.61, 1.62, 1.63, 1.64, 1.65, 1.66, 1.67, 1.68, 1.69, 1.7, 1.71, 1.72, 1.73, 1.74, 1.75, 1.76, 1.77, 1.78, 1.79, 1.8, 1.81, 1.82, 1.83, 1.84, 1.85, 1.86, 1.87, 1.88, 1.89, 1.9, 1.91, 1.92, 1.93, 1.94, 1.95, 1.96, 1.97, 1.98, 1.99, 2.0, 2.01, 2.02, 2.03, 2.04, 2.05, 2.06, 2.07, 2.08, 2.09, 2.1, 2.11, 2.12, 2.13, 2.14, 2.15, 2.16, 2.17, 2.18, 2.19, 2.2, 2.21, 2.22, 2.23, 2.24, 2.25, 2.26, 2.27, 2.28, 2.29, 2.3, 2.31, 2.32, 2.33, 2.34, 2.35, 2.36, 2.37, 2.38, 2.39, 2.4, 2.41, 2.42, 2.43, 2.44, 2.45, 2.46, 2.47, 2.48, 2.49, 2.5};
		double ints[] = {0.000456181, 0.000583188, 0.000728481, 0.000883329, 0.00105859, 0.00125674, 0.00147022, 0.00170953, 0.00195241, 0.00223114, 0.00250963, 0.0028276, 0.00315556, 0.00350822, 0.00387387, 0.0043125, 0.00470479, 0.00514404, 0.005601, 0.00609238, 0.00660199, 0.00714597, 0.00771221, 0.00831645, 0.00889296, 0.00953993, 0.0101985, 0.0108964, 0.0116301, 0.0124641, 0.0131065, 0.0139411, 0.0148527, 0.0155861, 0.0165491, 0.0173883, 0.0184511, 0.0194039, 0.020478, 0.0213544, 0.0224542, 0.0236723, 0.0247313, 0.0258157, 0.0272628, 0.0283137, 0.0295804, 0.0309122, 0.0321681, 0.03371, 0.0349483, 0.036556, 0.0379106, 0.0394087, 0.0411107, 0.0426086, 0.0441736, 0.0461568, 0.0478949, 0.0494177, 0.051159, 0.0531573, 0.0549635, 0.0571922, 0.0585948, 0.060978, 0.0627831, 0.0651593, 0.0670906, 0.0695052, 0.0713616, 0.0740542, 0.0761066, 0.0781652, 0.0807225, 0.0834137, 0.0849744, 0.088101, 0.0899934, 0.0932867, 0.0960539, 0.098619, 0.101697, 0.104876, 0.1075, 0.109984, 0.113812, 0.116746, 0.119837, 0.122591, 0.125471, 0.128321, 0.132076, 0.135077, 0.138358, 0.141397, 0.145801, 0.149101, 0.152642, 0.155497, 0.160439, 0.163598, 0.167912, 0.170654, 0.175861, 0.178869, 0.183001, 0.186932, 0.192675, 0.194775, 0.200161, 0.204547, 0.209378, 0.21407, 0.218233, 0.222602, 0.226405, 0.23249, 0.235407, 0.239736, 0.245669, 0.251265, 0.25503, 0.26068, 0.264793, 0.271057, 0.275058, 0.282923, 0.288067, 0.292663, 0.298089, 0.304158, 0.31085, 0.316666, 0.321105, 0.326323, 0.33331, 0.339288, 0.344185, 0.351429, 0.357711, 0.364066, 0.370798, 0.37656, 0.383118, 0.390097, 0.396853, 0.402089, 0.411402, 0.416298, 0.422144, 0.434204, 0.437939, 0.446036, 0.449472, 0.457489, 0.464092, 0.476255, 0.479186, 0.487929, 0.496432, 0.505826, 0.510569, 0.521978, 0.526563, 0.537089, 0.547156, 0.553269, 0.56144, 0.564983, 0.575614, 0.588394, 0.596666, 0.60504, 0.612757, 0.618791, 0.630155, 0.643596, 0.65154, 0.658086, 0.669288, 0.677345, 0.688492, 0.698755, 0.708327, 0.715092, 0.725951, 0.733844, 0.743757, 0.751604, 0.769696, 0.774119, 0.785864, 0.79235, 0.806395, 0.812722, 0.82824, 0.837338, 0.851319, 0.860199, 0.870896};
		if(m3Pi< ms[0]){
			std::cerr << "phaseSpace.h: Error: Phase space not defined at m3Pi = " << m3Pi << std::endl;
			return 0.;
		};
		int length = sizeof(ms)/sizeof(*ms);
		if(m3Pi >= ms[length-1]){
			std::cerr << "phaseSpace.h: Error: Phase space not defined at m3Pi = " << m3Pi << std::endl;
			return 0.;
		};
		int pos =0;
		double mmax = 0.;
		double mmin = 0.;
		for (int i =1; i< length; i++){
			if (ms[i] > m3Pi){
				pos = i;
				mmin=ms[i-1];
				mmax=ms[i];
				break;
			};
		};
		double frac = (m3Pi - mmin)/(mmax-mmin);
		return pow(ints[pos-1]*(1-frac) + ints[pos]*frac,.5);
	};
	if (mode==2){ // 3 Particle phase-space with Barrier factors. 
		double q = breakupMomentumReal<double>(m3Pi*m3Pi,m_isobar*m_isobar,PION_MASS*PION_MASS);
		double B = barrierFactor<double>(q,L);
		return B*phaseSpace(m3Pi,1,L,m_isobar);
	};
	if (mode==3){ // Barrier factors
		double q = breakupMomentumReal<double>(m3Pi*m3Pi,m_isobar*m_isobar,PION_MASS*PION_MASS);
		return barrierFactor<double>(q,L);
	};
	if (mode==4){ // Breakup momentum
		return breakupMomentumReal<double>(m3Pi*m3Pi,m_isobar*m_isobar,PION_MASS*PION_MASS);
	};
	if(mode==10){ // Strange factor commonly used. ->X<-
		double one = 250720.;
		double two = 172190.;
		double expOne = 2.4749;
		double expTwo = 2.8420;
		return sqrt(one/pow(m3Pi,expOne) - two/pow(m3Pi,expTwo));
	};
	if(mode >= 1000 and mode < 2000){
		return tabulated_integrals(m3Pi,mode-1000);
	};
	std::cerr << "phaseSpace.h: Error: Unknown phase space model: "<<mode<<std::endl;
	return 1.;
};







#endif //PHASESPACE_UTLRA_KEK
